#+TITLE: Build Support

Simple core builders used to drive higher level routines.
Many of these are going to be your bread and butter builders so get to know each of them well.

* =buildGyp=
A wrapper over =evalScripts= that carries globally installed =node-gyp= with some Nix friendly default flags.
This works "out of the box" for the vast majority of =node-gyp= projects.

** Example with a dependency.
It's rare that these routines need any dependency modules available ( only needed at Node.js runtime, not at install time ); but below we have an example of injecting a single dependency with minimal setup.
#+BEGIN_SRC nix
{ buildGyp }: let

  # Our only dependency.
  nan = builtins.fetchTree {
    type    = "tarball";
    url     = "https://registry.npmjs.org/nan/-/nan-2.16.0.tgz";
    narHash = "sha256-wqj1iyBB6KCNPGztsJOXYq/1P/SGvf1ob6uuxYgH4a8=";
  };

in buildGyp {
  name    = "msgpack-1.0.3";
  version = "1.0.3";
  src = builtins.fetchTree {
    type    = "tarball";
    url     = "https://registry.npmjs.org/msgpack/-/msgpack-1.0.3.tgz";
    narHash = "sha256-pZlSuooFP0HeU0kU9jUPsf4TYuQ3rRqG8tvbbdMoZS8=";
  };
  nmDirCmd = ''
    mkdir -p "$node_modules_path";
    cp -r --reflink=auto -- ${nan} $node_modules_path/nan;
    chmod -R +w "$node_modules_path";
  '';
}
#+END_SRC

In this specific build a symlink for `nan` would also work or even `export NODE_PATH="$NODE_PATH:${nan}"`, but because copying is our most trusted approach that's what we'll use here.
