#+TITLE: Testing

* Quick Start

** Running

This test suite can be run from the top level flake, or for more active development you can run the tests inside these subdirs to avoid needlessly reloading the full flake.

#+BEGIN_SRC shell
  # Running all tests from the top level ( local tree ):
  # Produces a `./result' file with PASS/FAIL logs.
  # Exits with non-zero code for test failures.
  # Because this produces a file, the evaluation is cached, making it
  # useful as a CI check.
  nix build .#tests;

  # Evaluate without caching/derivations ( local tree ):
  # This is preferred for more active development.
  # Change `.#tests.<SYSTEM>' as needed for your system.
  # This is like `.#tests' but just prints to `stderr'.
  nix eval .#tests.aarch64-darwin.check;

  # This dumps the "expected" and "result" values for `testFoo'
  # which may be defined in any of the `./tests/*/tests.nix' subdirs.
  # This might seem like a mess up here at the top level, but
  # really the flake entry point is meant for "run all" or running
  # from CI.
  nix eval .#tests.aarch64-darwin.testFoo;

  # Preferred for local dev:
  # Hop into the `tests/*' dirs and run with subsets of tests.
  cd ./tests;
  nix build -f .;      # Equivalent to `nix build .#tests;'
  nix eval -f . check; # Same as the flake just for stuff under CWD.

  # Limit the set of tests further by hopping into subdirs.
  cd ./meta;
  nix eval -f . check;

  # Runs one test, printing result/expected.
  # This is what I use most frequently during dev.
  nix eval -f . tests.testMkMetaSets;
#+END_SRC


** Writing Tests

The short story is that =default.nix= files exist to pass around imports and define the test runners, so you only need to touch them when you're trying to pass in newly written expressions/packages to test suites.

The actual tests all live in =tests.nix= files and are good old fashioned "expected result" and "expression" pairs.

They're unit tests like you've seen in every other language so I won't waste time here.
#+BEGIN_SRC nix
  test = {
    *** Read this ***
    # Test names MUST start with "test<NAME>"
    # Similarly the `expected' and `expr' fields must have those exact names.
    testFoo = {

      # The expected result.
      expected = 420;

      # The expression to check against.
      # This is almost always a function call with test data.
      expr = ( 4 * 10 ) + 10;

    };

  }
#+END_SRC

The test above is expected to fail, so we'll see it appear in outputs of ~nix build .#tests~ or ~nix eval -f . check~.
For these "checkers" we hide tests that pass, only printing "PASS".

To see test output regardless of pass/fail use ~nix eval -f .test.testFoo~ to see the test case evaluated as a raw value.
