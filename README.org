#+TITLE: Floco ( alpha name: at-node-nix )
#+AUTHOR: Alex Ameen
#+EMAIL: alex.ameen.tx@gmail.com

Node.js Nix expressions. 

Dynamically convert =package.json=, =package-lock.json=, NPM Registry Manifests, and other forms of package metadata to a common Nix friendly format: =metaEnt= and =metaSet=. 
Generate build recipes ( derivations ) =pkgEnt=, and collect them in =pkgSets=. 

Build directly from package locks with minimal effort. 

Modular build pipeline supports ~npm run build~, ~npm install~ ( including =node-gyp= ), and ~npm run test~ style targets "out of the box". Customize these and add your own using the =evalScripts= base or =stdenv.mkDerivation=.

Flexibile fetchers with =flocoFetch= and =flocoUnpack= make it easy to customize where your sources and pulled from, how they're processed, and how they're cached. 

=mkNmDir*= and =mkSourceTree= ~node_modules/~ tree builders can be written from scratch with a user friendly syntax, parsed from a lock, or generated from =metaSet= dependency info. 

Overlays make patching metadata and builders easy. Composing package sets and overrides follow conventional Nixpkgs patterns. These can be integrated into the base build pipeline through =flocoConfig=, or managed manually. Expose these overlays in flakes' =flocoOverlays= to reuse them across projects. 

Libs and utilities are organized such that you can use them in your projects without adopting or learning the whole "framework" - take what you want and skip the rest. 

* About
The purpose of this flake is to provide you with useful utilities for building
Node.js+Nix projects in whatever context or toolkit you choose.
While the =pkgSet= interfaces use pure Nix+Bash builders, you should view =pkgSet= and =metaSet= as abstractions which may be used with any setup - you just need to provide the bindings/implementations for their prototypes.

During alpha phase this project was named =at-node-nix=. The released tool will be named "Floco". 

* Interfaces and Tools

** =genMeta=
A script that generates a static =metaSet= file from an Node.js package descriptor.
This is ideal for published modules whose =package.json= and =package-lock.json= file does not change.

This has been exposed as a flake output as an "app", so ~nix run at-node-nix#genMeta -- @foo/bar@1.0.0;~ will allow you run this script from anywhere.

For example, when developing a project you may run into registry tarballs who have install scripts or =node-gyp= builds with large dependency graphs.
While =buildGyp= can generally build these modules without any dependencies in its working directory, you'll definitely encounter cases where you need to provide some =dependencies= members for a build to succeed.
In such a case, you can use ~genMeta @foo/bar@4.2.0 > foo-bar-4.2.0-meta.nix;~ to provide the minimal =metaSet= required to run that install routine with a builder such as =mkPkgEntSource= and =installPkgEnt= along with =mkNmDirCmd*=.

See ~nix run at-node-nix#genMeta -- --help~ for more info.

*** TODO: implement =lib.libmeta.metSetFromSerial=
At time of writing there =lib.libmeta.metaSetFromSerial= has not been implemented, so you'll need to manually call =lib.libmeta.metaEntFromSerial= and =lib.libmeta.mkMetaSet= to deserialize. This is going to be implemented ASAP.

*** TODO: allow =flocoConfig= to be passed to =genMeta=
There is not currently a simple avenue for users to pass in a custom =flocoConfig=, but if you need to immediately read the ~<at-node-nix>/bin/genMeta.sh~ and you'll see that it's pretty trivial to do so if you invoke ~nix eval ...;~ manually.

** =ExtInfo=
A "class-like" attrset made to be extensible into various forms of meta-data entries and collections; these are truly /functors/, meaning they are abstract data type that can act either as "records" or functions with self-reference ( so... basically but not technically a "classy thing" ).

At bottom this is a good old fashioned recursive attrset, with a few functors that take =self= as an arg.
It's designed to be extended into whatever you might normally use =makeScope=, =lib.extends=, =lib.fix=, or similar ~lib/customization.nix~ and ~lib/fixed-points.nix~ routines to do; but rolled into a single object with complementary usage.

This is the base that =meta(Ent|Set)= and several other constructs are built on.
Note that while older routines used =extInfo= for =pkg(Ent|Set)= that usage was deprecated in favor of standard Nixpkgs patterns for easier interop. 

*** Routines
The most notable base routines are =__serial= and =__extend=.
- =__serial=: Serialize objects into representations suitable for =builtins.toJSON= to dump to disk.
  + This may ( and should ) be customized to suit your use case; but the default serializer is quite useful as is.
- =__extend=: This is literally just =lib.extends= ( commonly seen as =nixpkgs.extend= or =lib.extend= ) but renamed to avoid clashing with any fields which might use that name.
  + The uniform "__<FN>" naming scheme also makes it easy to hide functors in order to map over data fields.

** =metaEnt= and =metaSet=.
Used to aggregate various types of package metadata into a common collection.
The purpose of this attrset is to convert =package.json=, =package-lock.json=, =manifest.json=, =blub.json=, or whatever other metadata you've got into a uniform attrs that can later be transformed into derivations or otherwise processed by this code-base's utilities.
- =metaEntFrom*=: These routines convert metadata focused on a single module/package into =metaEnt=.
  + =metaEntFromPjs=: Converts =package.json= data to =metaEnt=. TODO
  + =metaEntFromPlockV1=: Converts a single entry from =package-lock.json(v1/2)= to =metaEnt=.
  + =metaEntFromPlockV3=: Converts a single entry from =package-lock.json(v2/3)= to =metaEnt=.
  + You are encouraged to add new transformers.
- =metaSetFrom*=: These routines convert metadata a collection of modules/pacakges ( =metaEnt= ) into a group as =metaSet=.
  + =metaSetFromPjs=: Converts =package.json= workspace to =metaSet=. TODO
  + =metaSetFromPlockV1=: Converts =dependencies= (v1/2) fields in =package-lock.json= to =metaSet=.
  + =metaSetFromPlockV3=: Converts =packages= (v2/3) fields in =package-lock.json= to =metaSet=.
  + You are encouraged to add new transformers.

** =pkgEnt= and =pkgSet=
Derivation collections of package builders created from =meta(Ent|Set)= attrs.

See docs and examples in the [[file:./pkgs/pkgSet/README.org][pkgSets readme]].

* Flake Outputs
This flake provides an overlay which extends =ak-nix= and =nixpkgs= which is the preferred avenue for using these routines.

** =legacyPackages.<SYSTEM>= Output
An extension of Nixpkgs' =legacyPackages= that adds =outputs.overlays.default=. 
This is a convenient way to use =at-node-nix= routines in your projects without fussing with overlay management.

For example to symlink unpacked sources from a =package-lock.json(v2/3)= into the current working directory:
#+BEGIN_SRC shell
  nix eval --impure --expr --raw 'let
    pkgsFor = ( builtins.getFlake "at-node-nix" ).legacyPackages.${builtins.currentSystem};
    nmdir   = pkgsFor.mkNmDirPlockV3 { lockDir = toString ./.; dev = false; copy = true; };
  in "${nmdir}; installNodeModules;"|sh;
  # `.bin/' members are relative symlinks. 
  ls -la ./node_modules/**;
  # Next try `copy = false' to create symlinks with `lndir'. ( writeable dirs, read-only symlinked files ).
#+END_SRC
These tarballs will be cached by Nix for reuse.

** =lib= Output
The =lib= output contains routines which are not system dependendant and these never reference derivations, so you can freely access them "purely" even when =system= is unknown.
In some cases these routines may bottom out into routines which accent derivations or =system= as args so that they can provide common interfaces for various routines ( =libfetch= for example ); but the expressions themselves are not system dependant.

** Hidden Gems and Miscellaneous Expressions
Beyond that the =lib= and several ~pkgs/~ builders were designed for general-purpose use, or use with NPM and Yarn rather than =pkgSet= or =metaSet=, while I may not focus too much on documenting those expressions.
I do advise readers to take a look at them, because they may save you a lot of pain and suffering if you were to try and implement similar routines from scratch.

* Migration Notice
At time of writing I am migrating a large collection of expressions using the =at-node-nix= framework "in the field" into generalized routines; effectively this body of code will comprise the first official release.
As these routines are merged to =main= I intend to take that opportunity to document them and write test cases.

If you come across what appears to be a dead end or a missing function, please run a quick search on =nps-scoped= or feel free to send me an email at <alex.ameen.tx@gmail.com> or contact me on Matrix <growpotkin1:matrix.org>.

* Footnotes
[fn:ADT] https://www.cs.utexas.edu/~wcook/Drafts/2009/essay.pdf
